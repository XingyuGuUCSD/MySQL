#Udemy MySQL

#problem
schema  mysql VS Oracle/SQL server

how to modify column in mysql
Xingyu · 2 分钟前
mysql> create table movies(
    -> MovieID int auto_increment
    -> ,title varchar(100)
    -> ,release_year int
    -> ,rating double
    -> ,primary key(MovieId)
    -> );
Query OK, 0 rows affected (0.01 sec)

——————————————————————————————————————————————————————————————————————————————————————————

just like it, I forget to set the MovieID to be not null，how could i modify it?

To create an account at cloud9, go to c9.io and sign-up

Select php, apache as your workspace type

To install MySQL, type the following in your workspace directory and hit return -> mysql-ctl install
To start the MySQL server, type the following and hit return -> mysql-ctl start
To open a command line interface with direct access to your mysql database type in the following and hit return -> mysql-ctl cli

To see the hostname, type in the following and hit return -> select @@hostname;
**** Don't forget the semi-colon at the end! ****

To show databases -> show databases;

To exit the mysql cli -> exit

Command line crash course online -> http://cli.learncodethehardway.org/book/

Database Server: Service running on a machine (server or desktop), it houses many databases.

Database: Contains all of the persistent information for your applications

Schema: In MySQL, this is synonymous with database and can be used interchangeably, but shouldn’t because SQL Server and Oracle treat them differently. 
SQL Server/Oracle - Schema is a namespace inside the database with different permissions associated with it.

To clear screen from mysql cli -> \! clear

Open MySQL ->
Type : mysql-ctl cli

Some commands ->

show databases;

show schemas;

SQL statements end with “;”
If you don’t put the “;”, MySQL will wait to execute until you ad it in.

To create a new database ->
create database project1;

MySQL is case sensitive.
Don’t put spaces in the database name.  While possible, it will just cause issues later..  Spaces generally cause annoyances in names of databases, tables, columns and everything.

create schema project1; this statement would accomplish the same thing as the command above to create database

Create another database ->
create database mashrur1;

show databases;

To delete (or drop) the database mashrur1 (warning: this will immediately delete it) ->
drop database mashrur1;

To use a specific database for queries we'll be running and impacting (let's say we want this to be project1):
use project1;

Now when we create and do things like create objects or call objects, database “project1” is assumed.
Note: up arrow recalls previous commands.

- Tables are just like Excel Spreadsheets

- Columns have headers and are for certain types of data like strings, dates, numbers etc.
- Rows are the actual data which all fit inside the column data types.

- Structure matters. Forgetting a comma or a line or a space can break things.

To create a table called people (The capitalization of CREATE TABLE below is to separate out the sql code from the names of the tables, you can also just say create table, capitalization matters in column names):
CREATE TABLE people ( PersonID int
                     ,first_name varchar(100)
                     ,last_name  varchar(100)
);

To show database in use, type in select database();
show tables;

CREATE TABLE people2 ( PersonID INT NOT NULL AUTO_INCREMENT
                      ,FIRST_NAME VARCHAR(100) NULL
                      ,LAST_NAME VARCHAR(100) NULL
                      ,PRIMARY KEY (PersonID));

Primary Key is a unique value that each row will have, auto_increment makes it easy by automatically assigning them

If we want to remove a table, use DROP TABLE (or drop table)
show tables;

To add a column, first see the columns that are there by typing in -> show columns from people2;

Notice there are 3 columns;

To add a column called DOB:
alter table people2 add column DOB date NULL;

Similarly, to drop a column, type in:
alter table people2 drop column DOB;   
show columns from people2;

To delete tables:
drop table people;
drop table people2;

This will get rid of both tables

Homework exercise: Create two tables - actors and movies
actors will have columns ActorID (as primary key), first_name, last_name and specify primary key
movies will have columns MovieID (as primary key), title, release_year, rating and specify primary key

To add data to tables:

INSERT INTO actors ( FIRST_NAME , LAST_NAME )
VALUES ('Ben','Stiller');

We’ll discuss select further in the next lecture, but to show all data in the table:
SELECT *
FROM project1.actors; 

To insert multiple values into actors table:
INSERT INTO project1.actors ( FIRST_NAME , LAST_NAME )
VALUES ('Owen','Wilson')
      ,('Christine','Taylor')
      ,('Will','Ferrell')
      ,('Milla','Jovovich')
      ,('Jerry','Stiller')
      ,('David','Duchovny')
      ,('Jon','Voight')
      ,('Nathan','Graham');

Now that we have Zoolander, lets add new actors from Zoolander 2
INSERT INTO actors ( FIRST_NAME , LAST_NAME )
VALUES ('Kristen','Wiig')
      ,('Penélope','Cruz')
      ,('Lenny','Kravitz')
      ,('Macaulay','Culkin')
      ,('Justin','Bieber')
      ,('Cyrus','Arnold');
   
Now let's add data to the movies table:
INSERT INTO movies ( Title , ReleaseYear, Rating )
VALUES ('Zoolander',2001,'PG-13')
      ,('Zoolander2',2016,'PG-13')
      ,('Night at the Museum: Secret of the Tomb',2014,'PG')
      ,('Night at the Museum: Battle of the Smithsonian',2009,'PG')
      ,('Night at the Museum',2005,'PG')
      ,('National Treasure',2004,'PG')
      ,('Tropic Thunder',2008,'R');  

SELECT * FROM movies; -> This will display all data from the movies table

Select - Text lecture
节 2，讲座 15
SELECT * FROM actors;

SELECT * FROM movies;

-> SELECT section lists the results to be returned.
* Means everything
From is where you list tables.
We will add lots of extra details but the SELECT * FROM is the general structure of how we retrieve any and all data from the database.

Listing the columns returns the same results as *
SELECT ActorID
      ,FIRST_NAME
      ,LAST_NAME
FROM actors; 
  
SELECT FIRST_NAME
      ,LAST_NAME
FROM actors;   
Returns same number of rows, but only the columns that were requested (FIRST_NAME AND LAST_NAME)

Concat and substring - Text lecture
节 2，讲座 17
CONCAT - Use to add columns together for display

SELECT CONCAT(LAST_NAME, ', ', FIRST_NAME)
FROM actors;    

Returns same number of rows, but with our calculated row.

SQL lets you rename columns for display as well:
SELECT CONCAT(LAST_NAME, ', ', FIRST_NAME) AS ACTOR_NAME
FROM actors;      

To grab certain data from the rows under a column (instead of all the data) you can use substring:
SELECT LAST_NAME, SUBSTRING(LAST_NAME,1,3)
FROM actors;  

A useful query to generate user name from first_name and last_name columns:
SELECT FIRST_NAME
      ,LAST_NAME
      ,SUBSTRING(FIRST_NAME,1,1)
      ,CONCAT(SUBSTRING(FIRST_NAME,1,1),LAST_NAME) AS USER_NAME
FROM actors;  

Select allows you to name columns with spaces using “”, you can create new columns, and calculate columns.  You can reuse columns for basically anything.

SELECT CONCAT(LAST_NAME, ', ', FIRST_NAME) AS "Actor's Names"
      ,LAST_NAME AS LNAME
      ,FIRST_NAME AS "First Name"
      ,CONCAT(SUBSTRING(FIRST_NAME,1,1),LAST_NAME) AS USER_NAME
      ,'Any Text' AS Anything
      ,1+2        AS Math
FROM actors;

#add new column to database
ALTER TABLE table_name ADD column_name column_type;